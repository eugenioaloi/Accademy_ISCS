L'algoritmo è la sequenza di azioni, passi, per raggiungere un obiettivo.

Perchè sono così importanti? conoscere profondamente come si struttura un algoritmo, quando e come utilizzarlo è la base dell'informatica.

Tutto viene semplificato grazie agli algortimi

Algoritmi da interiorizzare:

1- quicksort(pivot, partition, swap, quicksort ricorsivo)
2- swap
3- binary search
4- buble sort

******************************

Cose da sapere in informatica:

- stack, spazio di memoria riservato ai valori del programma
- heap, spazio di memoria allocato per risolvere il pezzo di codice specifico del programma

- test di carico, quanto un dispositivo hardware o software può resistere -> es una macchina può raggiungere un tot di velocità

- test di velocità, quanto veloce il software raggiunge il risultato per il quale è stato creato

- test di retrocompatibilità, le cose devono funzionare in qualsiasi ambiente e condizione

- Gli ingredienti di un buon programma sono la sua velocità computazionale e il lo spazio di memoria utilizzato (minore possibile)

Un ottimo programma è:

- Efficente
- Veloce
- Adattabile

Esistono due tipi di programmazione:

- strutturata, va avanti riga per riga partendo dalla prima fino all'ultima (a meno di salti es goto etc)

- ad oggetti, esistono e attendo di essere chiamati al momento opportuno. Non sono per forza ordinati tra loro e presentano all'interno un codice strutturato che viene seguito in maniera iterattiva al bisogno.

-Non bisogno mai pensare di possedere una potenza di calcolo infinita.

**********************************************

Astrarre un concetto significa darlo per scontato. Posso asstrarre il concetto di spingere il pedale=aumentare la velocità, perchè premondo per esempio il pedale dell'acceleratore in macchina, questa aumenta la sua velocità.

Il sistema operativo si prende in carico di accedere i pezzi di hardware nel quale si trova. COLD & DARK

Dopodichè si occupa di fare il drilldown, cioè andare in profondità tale da recuperare il codice presente nell'heap ed esporre l'interfaccia all'utente.

DIVIDI ET IMPERA, cammini minimi (miniTask sempre più piccoli da implementare) e dominare il codice (sapere sempre cosa si sta scrivendo)


